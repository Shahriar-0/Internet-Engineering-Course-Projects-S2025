{
	"info": {
		"_postman_id": "e9dee72d-54cc-4272-8a91-f40e5241ecb8",
		"name": "e2e test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "38187593",
		"_collection_link": "https://blue-station-566561.postman.co/workspace/IE~1c4dc48c-134b-4309-af53-c3f557a9706f/collection/38187593-e9dee72d-54cc-4272-8a91-f40e5241ecb8?action=share&source=collection_link&creator=38187593"
	},
	"item": [
		{
			"name": "User",
			"item": [
				{
					"name": "customer user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", () => {\r",
									"    pm.response.to.have.status(201);\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"role\":\"customer\",\r\n    \"username\":\"customerTest1\",\r\n    \"password\":\"1234\",\r\n    \"email\":\"customerTest1@test.com\",\r\n    \"address\":{\r\n        \"country\":\"Iran\",\r\n        \"city\":\"Tehran\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url_ie}}/users",
							"host": [
								"{{base_url_ie}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", () => {\r",
									"    pm.response.to.have.status(201);\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"role\":\"admin\",\r\n    \"username\":\"adminTest1\",\r\n    \"password\":\"1234\",\r\n    \"email\":\"adminTest1@test.com\",\r\n    \"address\":{\r\n        \"country\":\"Iran\",\r\n        \"city\":\"Tehran\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url_ie}}/users",
							"host": [
								"{{base_url_ie}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "customer user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test(\"Validate response data\", () => {\r",
									"    const actualCustomer =  pm.response.json().data;\r",
									"    const expectedCustomer = {\r",
									"        username: \"customerTest1\",\r",
									"        role: \"customer\",\r",
									"        email: \"customerTest1@test.com\",\r",
									"        address: {\r",
									"            country: \"Iran\",\r",
									"            city: \"Tehran\"\r",
									"        },\r",
									"        balance: 0\r",
									"    }\r",
									"    pm.expect(actualCustomer).to.deep.equal(expectedCustomer);\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url_ie}}/users/customerTest1",
							"host": [
								"{{base_url_ie}}"
							],
							"path": [
								"users",
								"customerTest1"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test(\"Validate response data\", () => {\r",
									"    const actualAdmin =  pm.response.json().data;\r",
									"    const expectedAdmin = {\r",
									"        username: \"adminTest1\",\r",
									"        role: \"admin\",\r",
									"        email: \"adminTest1@test.com\",\r",
									"        address: {\r",
									"            country: \"Iran\",\r",
									"            city: \"Tehran\"\r",
									"        },\r",
									"    }\r",
									"    pm.expect(actualAdmin).to.deep.equal(expectedAdmin);\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url_ie}}/users/adminTest1",
							"host": [
								"{{base_url_ie}}"
							],
							"path": [
								"users",
								"adminTest1"
							]
						}
					},
					"response": []
				},
				{
					"name": "user not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", () => {\r",
									"    pm.response.to.have.status(404);\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url_ie}}/users/randomUsernameThatNotExists",
							"host": [
								"{{base_url_ie}}"
							],
							"path": [
								"users",
								"randomUsernameThatNotExists"
							]
						}
					},
					"response": []
				},
				{
					"name": "null body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url_ie}}/users",
							"host": [
								"{{base_url_ie}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "null fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"pm.test(\"Violated fields should exists in response data\", () => {\r",
									"    const errorData = pm.response.json().data;\r",
									"    pm.expect(errorData).to.have.keys(\"password\", \"address\", \"role\", \"email\", \"username\")\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url_ie}}/users",
							"host": [
								"{{base_url_ie}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "bad field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"pm.test(\"Violated fields should exists in response data\", () => {\r",
									"    const errorData = pm.response.json().data;\r",
									"    pm.expect(errorData).to.have.keys(\"password\", \"address.city\", \"address.country\", \"role\", \"email\", \"username\")\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"role\":\"role\",\r\n    \"username\":\"shahnam feyzian\",\r\n    \"password\": \"12\",\r\n    \"email\":\"email\",\r\n    \"address\":{}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url_ie}}/users",
							"host": [
								"{{base_url_ie}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "username already exists",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"pm.test(\"Validate error message\", () => {\r",
									"    const actualMessage = pm.response.json().message;\r",
									"    const expectedMessage = \"User with username 'customerTest1' already exists!\";\r",
									"    pm.expect(actualMessage).to.equal(expectedMessage);\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"role\":\"customer\",\r\n    \"username\":\"customerTest1\",\r\n    \"password\":\"1234\",\r\n    \"email\":\"test@test.com\",\r\n    \"address\":{\r\n        \"country\":\"Iran\",\r\n        \"city\":\"Tehran\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url_ie}}/users",
							"host": [
								"{{base_url_ie}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "email already exists",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"pm.test(\"Validate error message\", () => {\r",
									"    const actualMessage = pm.response.json().message;\r",
									"    const expectedMessage = \"User with email 'adminTest1@test.com' already exists!\";\r",
									"    pm.expect(actualMessage).to.equal(expectedMessage);\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"role\":\"customer\",\r\n    \"username\":\"adminTest2\",\r\n    \"password\":\"1234\",\r\n    \"email\":\"adminTest1@test.com\",\r\n    \"address\":{\r\n        \"country\":\"Iran\",\r\n        \"city\":\"Tehran\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url_ie}}/users",
							"host": [
								"{{base_url_ie}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Authentication",
			"item": [
				{
					"name": "login with username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"password\":\"1234\",\r\n    \"username\":\"customerTest1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url_ie}}/auth/login",
							"host": [
								"{{base_url_ie}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "try login twice",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"pm.test(\"Validate error message\", () => {\r",
									"    const actualMessage = pm.response.json().message;\r",
									"    const expectedMessage = \"Some one logged in\";\r",
									"    pm.expect(actualMessage).to.equal(expectedMessage);\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"password\":\"1234\",\r\n    \"username\":\"customerTest1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url_ie}}/auth/login",
							"host": [
								"{{base_url_ie}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url_ie}}/auth/logout",
							"host": [
								"{{base_url_ie}}"
							],
							"path": [
								"auth",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "try logout twice",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", () => {\r",
									"    pm.response.to.have.status(401);\r",
									"})\r",
									"\r",
									"pm.test(\"Validate error message\", () => {\r",
									"    const actualMessage = pm.response.json().message;\r",
									"    const expectedMessage = \"No one logged in\";\r",
									"    pm.expect(actualMessage).to.equal(expectedMessage);\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url_ie}}/auth/logout",
							"host": [
								"{{base_url_ie}}"
							],
							"path": [
								"auth",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "login with email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"password\":\"1234\",\r\n    \"email\":\"adminTest1@test.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url_ie}}/auth/login",
							"host": [
								"{{base_url_ie}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url_ie}}/auth/logout",
							"host": [
								"{{base_url_ie}}"
							],
							"path": [
								"auth",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "bad fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"pm.test(\"Violated fields should exists in response data\", () => {\r",
									"    const errorData = pm.response.json().data;\r",
									"    pm.expect(errorData).to.have.keys(\"password\", \"bothEmailAndUsernameBlank\");\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url_ie}}/auth/login",
							"host": [
								"{{base_url_ie}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "user does not exists",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", () => {\r",
									"    pm.response.to.have.status(401);\r",
									"})\r",
									"\r",
									"pm.test(\"Validate error message\", () => {\r",
									"    const actualMessage = pm.response.json().message;\r",
									"    const expectedMessage = \"Username/Email or Password is not correct\";\r",
									"    pm.expect(actualMessage).to.equal(expectedMessage);\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"password\":\"password\",\r\n    \"username\":\"usernameThatDoesNotExist\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url_ie}}/auth/login",
							"host": [
								"{{base_url_ie}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "wrong password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", () => {\r",
									"    pm.response.to.have.status(401);\r",
									"})\r",
									"\r",
									"pm.test(\"Validate error message\", () => {\r",
									"    const actualMessage = pm.response.json().message;\r",
									"    const expectedMessage = \"Username/Email or Password is not correct\";\r",
									"    pm.expect(actualMessage).to.equal(expectedMessage);\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"password\":\"12345\",\r\n    \"username\":\"customerTest1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url_ie}}/auth/login",
							"host": [
								"{{base_url_ie}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}